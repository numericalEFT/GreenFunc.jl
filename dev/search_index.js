var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GreenFunc","category":"page"},{"location":"#GreenFunc","page":"Home","title":"GreenFunc","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GreenFunc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GreenFunc]","category":"page"},{"location":"#GreenFunc.Green2DLR","page":"Home","title":"GreenFunc.Green2DLR","text":"Green's function with two external legs that has in-built Discrete Lehmann Representation.\n\n#Members:\n\n'name': Name of green's function\n'isFermi': Particle is fermi or boson\n'β': Inverse temperature\n'color': Number of different species of Green's function (such as different spin values)\n'dlrGrid': In-built Discrete Lehmann Representation\n'timeType': Whether the Green's function is in time/frequency/dlr space\n'timeSymmetry': Whether the Green's function has particle-hole symmetry, anti-particle-hole symmetry or none of them\n'timeGrid': Time or Frequency grid\n'spaceType': Whether the Green's function is in coordinate space/momentum space\n'spaceGrid': Coordinate or momentum grid\n'instant': Instantaneous part of Green's function that is proportional to δ(τ) in τ space.\n'dynamic': Dynamic part of Green's function\n'instantError': Error of instantaneous part\n'dynamicError': Error of dynamic part\n\n\n\n\n\n","category":"type"},{"location":"#GreenFunc.getDynamic-Tuple{Green2DLR, Any, Any}","page":"Home","title":"GreenFunc.getDynamic","text":"function get(green::Green2DLR, time, space; color=nothing, timeMethod = :default, spaceMethod=:default)\n\nFind value of Green's function at given color, τ/ωn and k/x by interpolation. Interpolation in τ/ωn use DLR method #Argument\n\n'green': Green's function\n'time': Target τ/ωn point \n'space': Target k/x point\n'colorvalue': Target color\n'timeMethod':Method of interpolation in ωn/τ\n'spacemethod': Method of interpolation in k/x \n\n\n\n\n\n","category":"method"},{"location":"#GreenFunc.toDLR-Tuple{Green2DLR}","page":"Home","title":"GreenFunc.toDLR","text":"function toTau(green::Green2DLR, targetGrid =  green.dlrGrid.τ)\nConvert Green's function to τ space by Fourier transform.\nIf green is already in τ space then it will be interpolated to the new grid.\n#Arguements\n- 'green': Original Green's function\n- 'targetGrid': Grid of outcome Green's function. Default: DLR τ grid\n\n\n\n\n\n","category":"method"},{"location":"#GreenFunc.toMatFreq","page":"Home","title":"GreenFunc.toMatFreq","text":"function toTau(green::Green2DLR, targetGrid =  green.dlrGrid.τ)\nConvert Green's function to τ space by Fourier transform.\nIf green is already in τ space then it will be interpolated to the new grid.\n#Arguements\n- 'green': Original Green's function\n- 'targetGrid': Grid of outcome Green's function. Default: DLR τ grid\n\n\n\n\n\n","category":"function"},{"location":"#GreenFunc.toTau","page":"Home","title":"GreenFunc.toTau","text":"function toTau(green::Green2DLR, targetGrid =  green.dlrGrid.τ)\nConvert Green's function to τ space by Fourier transform.\nIf green is already in τ space then it will be interpolated to the new grid.\n#Arguements\n- 'green': Original Green's function\n- 'targetGrid': Grid of outcome Green's function. Default: DLR τ grid\n\n\n\n\n\n","category":"function"}]
}
