var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GreenFunc","category":"page"},{"location":"#GreenFunc","page":"Home","title":"GreenFunc","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GreenFunc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GreenFunc]","category":"page"},{"location":"#GreenFunc.Green2DLR","page":"Home","title":"GreenFunc.Green2DLR","text":"Green's function with two external legs that has in-built Discrete Lehmann Representation. #Parameters:\n\n'T': type of data\n'TType': type of time domain, TType<:TimeDomain\n'TGT': type of time grid\n'SGT': type of space grid\n\n#Members:\n\n'name': Name of green's function\n'color': Number of different species of Green's function (such as different spin values)\n'dlrGrid': In-built Discrete Lehmann Representation\n'timeGrid': Time or Frequency grid\n'spaceType': Whether the Green's function is in coordinate space/momentum space\n'spaceGrid': Coordinate or momentum grid\n'instant': Instantaneous part of Green's function that is proportional to δ(τ) in τ space.\n'dynamic': Dynamic part of Green's function\n'instantError': Error of instantaneous part\n'dynamicError': Error of dynamic part\n\n\n\n\n\n","category":"type"},{"location":"#GreenFunc.dynamic-Union{Tuple{SM}, Tuple{TM}, Tuple{SGT}, Tuple{TGT}, Tuple{TT}, Tuple{DT}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Any, Int64, Int64, TM, SM}} where {DT, TT, TGT<:CompositeGrids.SimpleG.AbstractGrid, SGT<:CompositeGrids.SimpleG.AbstractGrid, TM, SM}","page":"Home","title":"GreenFunc.dynamic","text":"function dynamic(green::Green2DLR{DT,TT,TGT,SGT}, time, space, color1::Int, color2::Int, timeMethod::TM , spaceMethod::SM) where {DT,TT,TGT<:CompositeGrids.AbstractGrid,SGT<:CompositeGrids.AbstractGrid,TM,SM}\n\nFind value of Green's function's dynamic part at given color and k/x by interpolation. Interpolation method is by default depending on the grid, but could also be chosen to be linear.\n\n#Argument\n\n'green': Green's function\n'time': Target τ/ω_n point\n'space': Target k/x point\n'color1': Target color1\n'color2': Target color2\n'timeMethod': Method of interpolation for time\n'spaceMethod': Method of interpolation for space \n\n\n\n\n\n","category":"method"},{"location":"#GreenFunc.instant-Union{Tuple{SM}, Tuple{SGT}, Tuple{TGT}, Tuple{TT}, Tuple{DT}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Int64}, Tuple{Green2DLR{DT, TT, TGT, SGT}, Any, Int64, Int64}} where {DT, TT, TGT, SGT, SM}","page":"Home","title":"GreenFunc.instant","text":"function instant(green::Green2DLR{DT,TT,TGT,SGT}, space, color1::Int, color2::Int=color1; spaceMethod::SM = DEFAULTINTERP) where {DT,TT,TGT,SGT,SM}\n\nFind value of Green's function's instant part at given color and k/x by interpolation. Interpolation method is by default depending on the grid, but could also be chosen to be linear.\n\n#Argument\n\n'green': Green's function\n'space': Target k/x point\n'color1': Target color1\n'color2': Target color2\n'spaceMethod': Method of interpolation for space. \n\n\n\n\n\n","category":"method"},{"location":"#GreenFunc.toDLR-Tuple{Green2DLR}","page":"Home","title":"GreenFunc.toDLR","text":"function toDLR(green::Green2DLR)\n\nConvert Green's function to dlr space.\n\n#Arguements\n\n'green': Original Green's function\n\n\n\n\n\n","category":"method"},{"location":"#GreenFunc.toMatFreq","page":"Home","title":"GreenFunc.toMatFreq","text":"function toMatFreq(green::Green2DLR, targetGrid =  green.dlrGrid.n)\n\nConvert Green's function to matfreq space by Fourier transform. If green is already in matfreq space then it will be interpolated to the new grid.\n\n#Arguements\n\n'green': Original Green's function\n'targetGrid': Grid of outcome Green's function. Default: DLR n grid\n\n\n\n\n\n","category":"function"},{"location":"#GreenFunc.toTau","page":"Home","title":"GreenFunc.toTau","text":"function toTau(green::Green2DLR, targetGrid =  green.dlrGrid.τ)\n\nConvert Green's function to τ space by Fourier transform. If green is already in τ space then it will be interpolated to the new grid.\n\n#Arguements\n\n'green': Original Green's function\n'targetGrid': Grid of outcome Green's function. Default: DLR τ grid\n\n\n\n\n\n","category":"function"}]
}
